snippet load
	data = np.loadtxt(${1:fn}, delimiter='${2:\t}', skiprows='${3:0}')
	${4}
snippet save
	np.savetxt(${1:OUT_FILE}, ${2:data}, delimiter='${3:\t}')
	${4}
snippet pyl
	from pylab import *

snippet template Iterate Files
	import os

	IN_FILE = r'${1}'
	OUT_FILE = r'${2}'
	DATA_DIR = r'${3}'

	for fn in os.listdir(DATA_DIR):
		if fn.endswith('${4:.}'):
			fh = open(os.path.join(DATA_DIR, fn), 'r')
			${5}
snippet template Iterate Files Regex
	import os
	import re

	IN_FILE = r'${1}'
	OUT_FILE = r'${2}'
	DATA_DIR = r'${3:.}'

	for fn in os.listdir(DATA_DIR):
		res = re.match(IN_FILE, fn)
		if res:
			fh = open(os.path.join(DATA_DIR, fn), 'r')
			m = res.group(1)
			${4}
snippet template __init__.py
	__version__ = '0.0.0'

	import sys
	IS_PYTHON3 = sys.version_info[0] >= 3

	if IS_PYTHON3:
		exec('from .${1:} import ${2:}')
		exec('from . import config')
	else:
		exec('from $1 import $2')
		exec('import config')

snippet template Setup.py
	from distutils.core import setup

	setup(
		name = '${1:}',
		packages = ['$1'],
		version = '0.0.0',
		description = '${2}',
		author = 'Brendan Arnold',
		author_email = 'brendanarnold@gmail.com',
		url = '${3:}',
		download_url = '$3',
		keywords = [${4}],
		classifiers = [
			'Development Status :: 4 - Beta',
			'Environment :: Console',
			'Intended Audience :: Science/Research',
			'Intended Audience :: Developers',
			'License :: OSI Approved :: MIT License',
			'Natural Language :: English',
			'Operating System :: OS Independent',
			'Programming Language :: Fortran',
			'Programming Language :: Python :: 2',
			'Programming Language :: Python :: 3',
			'Topic :: Text Processing :: General',
			'Topic :: Software Development :: Interpreters',
			'Topic :: Scientific/Engineering',
		],
		long_description = '''
	${5}
	'''
	)
snippet #!
	#!/usr/bin/python

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
